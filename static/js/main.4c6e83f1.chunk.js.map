{"version":3,"sources":["Componente/clima.js","App.js","reportWebVitals.js","index.js"],"names":["Clima","props","state","tareaActual","text","texto","nubosidad","temp","temp_min","temp_max","sens_term","pressure","visibility","weather","weather_description","city","wind_speed","icon","sunrise","sunset","wallpaper","wew","nose","colorText","classCity","tempMM","tempp","ciudad","this","axios","get","then","resp","data","sys","Math","floor","main","feels_like","time","Date","toLocaleTimeString","timev","parseInt","console","log","humanDateFormatSunr","toLocaleString","humanDateFormatSun","setState","clouds","all","name","wind","speed","pedirClima","timeDay","event","target","value","code","agregarTarea","className","placeholder","onChange","inputChange","bind","onKeyPress","keyPress","onClick","class","aria-hidden","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c6e83f1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport axios from 'axios'; \r\nimport \"font-awesome/css/font-awesome.css\";\r\n\r\nexport class Clima extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tareaActual: \"\",\r\n            text:\"buenos aires\",\r\n            texto:\"\",\r\n            nubosidad: \"\",\r\n            temp: \"\",\r\n            temp_min: \"\",\r\n            temp_max: \"\",\r\n            sens_term: \"\",\r\n            pressure: \"\",\r\n            visibility: \"\",\r\n            weather: \"\",\r\n            weather_description: \"\",\r\n            city: \"\",\r\n            wind_speed:\"\",\r\n            icon:\"\",\r\n            sunrise:\"\",\r\n            sunset:\"\",\r\n            wallpaper:\"\",\r\n            wew:\"\",\r\n            nose:\"\",\r\n            colorText:\"\",\r\n            classCity:\"city\",\r\n            tempMM:\"\",\r\n            tempp:\"\",\r\n        }\r\n    }\r\n\r\n\r\n    pedirClima(){\r\n        let ciudad = this.state.tareaActual || this.state.text\r\n        axios.get(\"https://api.openweathermap.org/data/2.5/weather?q=\"+ciudad+\"&appid=c7ef015fd8c3a18683fb069006991c19\").then((resp)=>{\r\n            let sunrise = resp.data.sys.sunrise ;\r\n            let sunset = resp.data.sys.sunset ;\r\n            let temp = Math.floor(resp.data.main.temp - 273);\r\n            let temp_min = Math.floor(resp.data.main.temp_min - 273);\r\n            let temp_max = Math.floor(resp.data.main.temp_max - 273);\r\n            let feels_like = Math.floor(resp.data.main.feels_like - 273);\r\n            let visibility = Math.floor(resp.data.visibility / 1000);\r\n            let icon\r\n            let wallpaper\r\n            let weather_description\r\n            let colorText\r\n            let classCity\r\n            let time = new Date().toLocaleTimeString()\r\n            let timev = parseInt(time)\r\n            let tempMM\r\n            let tempp\r\n\r\n            if (timev >= 19 ){\r\n                classCity=\"cityNight\"\r\n                tempMM=\"tempNight col-6\"\r\n                tempp=\"temperaturaNight\"\r\n                } else {\r\n                    classCity=\"city\"\r\n                    tempMM=\"col-6\"\r\n                    tempp=\"temperatura\"\r\n                }\r\n            if (resp.data.weather[0].main===\"Thunderstorm\"){\r\n                icon = \"fa fa-cloud fa-5x\"\r\n                weather_description = \"Tormenta Electrica\"\r\n                if (timev >= 19 ){\r\n                    wallpaper=\"Thunderstorm\"\r\n                    } else {\r\n                    wallpaper=\"Thunderstorm\"\r\n        }\r\n            }\r\n            if (resp.data.weather[0].main===\"Drizzle\"){\r\n                icon = \"fa fa-tint fa-5x\"\r\n                weather_description = \"Lloviznas\"\r\n                if (timev >= 19 ){\r\n                    wallpaper=\"DrizzleNight\"\r\n                    } else {\r\n                    wallpaper=\"Drizzle\"\r\n        }\r\n            }\r\n            if (resp.data.weather[0].main===\"Rain\"){\r\n                icon = \"fa fa-bolt fa-5x\"\r\n                weather_description = \"Lluvia\"\r\n                if (timev >= 19 ){\r\n                    wallpaper=\"RainNight\"\r\n                    } else {\r\n                    wallpaper=\"Rain\"\r\n        }\r\n            }\r\n            if (resp.data.weather[0].main===\"Snow\"){\r\n                icon = \"fa fa-snowflake-o fa-5x\"\r\n                weather_description = \"Nevando\"\r\n                if (timev >= 20 ){\r\n                    wallpaper=\"Snow\"\r\n                    } else {\r\n                    wallpaper=\"Snow\"\r\n        }\r\n            }\r\n            if (resp.data.weather[0].main===\"Clouds\"){\r\n                icon = \"fa fa-cloud fa-5x\"\r\n                weather_description = \"Parcialmente Nublado\"\r\n                if (timev >= 19 ){\r\n                    wallpaper=\"CloudsNight\"\r\n                    } else {\r\n                    wallpaper=\"Clouds\"\r\n        }\r\n            }\r\n            if (resp.data.weather[0].main===\"Clear\"){\r\n                icon = \"fa fa-sun-o fa-5x\"\r\n                weather_description = \"Cielo Despejado\"\r\n                console.log(timev)\r\n                        if (timev >= 19 ){\r\n                        wallpaper=\"ClearNight\"\r\n                        } else {\r\n                        wallpaper=\"Clear\"\r\n            }\r\n            }\r\n\r\n            const millisecondsSunr = sunrise * 1000 \r\n            const dateObjectSunr = new Date(millisecondsSunr)\r\n            const humanDateFormatSunr = dateObjectSunr.toLocaleString()\r\n\r\n            const millisecondsSun = sunset * 1000 \r\n            const dateObjectSun = new Date(millisecondsSun)\r\n            const humanDateFormatSun = dateObjectSun.toLocaleString()\r\n            \r\n\r\n            // let we = new Date().toLocaleTimeString()\r\n            // let wew = we\r\n\r\n            this.setState({\r\n                nubosidad : resp.data.clouds.all,\r\n                temp :temp,\r\n                temp_min :temp_min,\r\n                temp_max :temp_max,\r\n                sens_term :feels_like,\r\n                pressure :resp.data.main.pressure,\r\n                visibility: visibility,\r\n                weather: resp.data.weather[0].main,\r\n                weather_description : weather_description,\r\n                city: resp.data.name,\r\n                wind_speed: resp.data.wind.speed,\r\n                icon:icon,\r\n                colorText:colorText,\r\n                wallpaper:wallpaper,\r\n                sunset:humanDateFormatSun,\r\n                sunrise:humanDateFormatSunr,\r\n                classCity:classCity,\r\n                tempMM:tempMM,\r\n                tempp:tempp\r\n            })\r\n        })\r\n    }\r\n\r\n    \r\n\r\n    timeDay(){\r\n        // let time = new Date().toLocaleTimeString()\r\n        // let timev = parseInt(time)\r\n        // if (timev < 19 ){\r\n        //     this.setState({\r\n        //         wallpaper:\"wallpaper\",\r\n        //     })\r\n        // } else {\r\n        //     this.setState({\r\n        //         wallpaper:\"aper\",\r\n        //     })\r\n        // }\r\n    }\r\n\r\n    componentDidMount(){  \r\n        this.pedirClima()\r\n        this.timeDay()\r\n    }\r\n    \r\n    inputChange(event){//metodo\r\n        this.setState({tareaActual : event.target.value});\r\n        // console.log(event.target.value)\r\n    }\r\n\r\n    agregarTarea(){ //metodo: Click\r\n        this.setState({\r\n            text: this.state.tareaActual\r\n        })\r\n        this.pedirClima()\r\n    }\r\n\r\n    keyPress(event){ //metodo: al apretar enter, entra a la lista\r\n        if (event.code === 'Enter'){\r\n            this.agregarTarea()\r\n        }\r\n    }\r\n\r\n    \r\n    render() {\r\n        return (\r\n            <div className={this.state.wallpaper} >\r\n                \r\n                    <div className=\"\">\r\n                    <input className=\"form-control \"  placeholder=\"Ingrese nombre de la ciudad...\"\r\n                    onChange={this.inputChange.bind(this)}\r\n                    value={this.state.tareaActual}\r\n                    onKeyPress={this.keyPress.bind(this)}\r\n                    ></input>\r\n                    <button className=\"btn btn-dark btn-block mt-1\"\r\n                    onClick={this.agregarTarea.bind(this)}>Buscar clima</button>\r\n                    </div>\r\n\r\n                {/* <img style={{height: 1000, width:1000, position: \"absolute !important\", zIndex: \"-222 !important \", backgroundSize:\"cover\"}}src={wallpaper} ></img> */}\r\n                <header className=\" bg-transparent text-center\">\r\n                    <h1 className={this.state.classCity}>{this.state.city}</h1>\r\n                </header>\r\n\r\n                <ul className=\"list-group\">\r\n                    \r\n                    <li className=\"bg-transparent p-5 mb-2 bg-light text-dark text-center\">\r\n                        <h1 className={this.state.tempp} >{this.state.temp}</h1>\r\n                        <div className=\"row\">\r\n                        <div className={this.state.tempMM}>Max:{this.state.temp_max} °C</div>\r\n                        <div className={this.state.tempMM}>Min:{this.state.temp_min} °C</div>\r\n                        </div>\r\n                    </li>\r\n\r\n                    <li className=\"tarjeta p-3 mb-2 bg-light text-dark\">\r\n                        <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                        <i className={this.state.icon}></i>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                        <div >{this.state.weather_description}</div> \r\n                        <div >Nubosidad: {this.state.nubosidad}%</div>\r\n                        <div > Visibilidad: {this.state.visibility}</div>\r\n                        </div>\r\n                        </div>\r\n                    </li>\r\n\r\n                    <li className=\"tarjeta p-3 mb-2 bg-light text-dark\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                        <div > Presión</div>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                        <div > {this.state.pressure} hPa</div>\r\n                        </div>\r\n                        </div>\r\n                    </li>\r\n\r\n                    <li className=\"tarjeta p-3 mb-2 bg-light text-dark\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                        <div className=\"fa fa-leaf fa-3x\"> </div>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                        <div > Velocidad del Viento</div>\r\n                        <div >{this.state.wind_speed}km/h</div>\r\n                        </div>\r\n                        </div>\r\n                    </li>\r\n\r\n                    <li className=\"tarjeta p-3 mb-2 bg-light text-dark\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                        <div>Amanecer <i class=\"fa fa-sun-o\" aria-hidden=\"true\"></i></div>\r\n                        <div >{this.state.sunrise}</div>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                        <div>Atardecer <i class=\"fa fa-moon-o\" aria-hidden=\"true\"></i></div>\r\n                        <div >{this.state.sunset}</div>\r\n                        </div>\r\n                        </div>\r\n                    </li>\r\n\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Clima\r\n","import './App.css';\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport Clima from \"./Componente/clima.js\"\n\nfunction App() {\n  return (\n    <div>\n\n\n    <main >\n      <Clima />\n    </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}